package com.jinfeng.spark.example.streaming

import org.apache.spark.sql.SparkSession
import org.apache.spark.storage.StorageLevel
import org.apache.spark.streaming.{Seconds, StreamingContext}

/**
  * @package: com.jinfeng.spark.streaming
  * @author: wangjf
  * @date: 2019/3/22
  * @time: 下午6:42
  * @email: wjf20110627@163.com
  * @phone: 152-1062-7698
  */
object NetworkWordCount {
  def main(args: Array[String]) {
    val args = new Array[String](2)
    args(0) = "127.0.0.1"
    args(1) = "7777"
    if (args.length < 2) {
      System.err.println("Usage: NetworkWordCount <hostname> <port>")
      System.exit(1)
    }

    StreamingExamples.setStreamingLogLevels()

    // Create the context with a 1 second batch size
    val spark = SparkSession.builder().master("local").appName("NetworkWordCount")
      .config("spark.cassandra.connection.host", "127.0.0.1")
      .getOrCreate()
    val sparkConf = spark.sparkContext
    val ssc = new StreamingContext(sparkConf, Seconds(2))

    // Create a socket stream on target ip:port and count the
    // words in input stream of \n delimited text (eg. generated by 'nc')
    // Note that no duplication in storage level only for running locally.
    // Replication necessary in distributed scenario for fault tolerance.
    // Linux nc -lk 7777 || windows nc -l -p 7777
    val lines = ssc.socketTextStream(args(0), args(1).toInt, StorageLevel.MEMORY_AND_DISK_SER)
    val words = lines.flatMap(_.split(" "))
    val wordCounts = words.map(x => (x, 1)).reduceByKeyAndWindow((a: Int, b: Int) => (a + b), Seconds(10), Seconds(2))

    //    scala.sys.addShutdownHook({
    //      ssc.stop(true, true)
    //    })

    wordCounts.print()
    import com.datastax.spark.connector.streaming._
    wordCounts.saveToCassandra("streaming_test", "words")
    ssc.start()
    ssc.awaitTermination()
  }
}
